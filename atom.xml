<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jgduan.github.io/</id>
    <title>Zihao&apos;s blog</title>
    <updated>2021-05-10T14:51:33.027Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jgduan.github.io/"/>
    <link rel="self" href="https://jgduan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://jgduan.github.io/images/avatar.png</logo>
    <icon>https://jgduan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Zihao&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[【蓝牙】经典蓝牙与BLE低功耗蓝牙]]></title>
        <id>https://jgduan.github.io/post/lan-ya-jing-dian-lan-ya-yu-ble-di-gong-hao-lan-ya/</id>
        <link href="https://jgduan.github.io/post/lan-ya-jing-dian-lan-ya-yu-ble-di-gong-hao-lan-ya/">
        </link>
        <updated>2021-05-10T14:07:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-蓝牙的概述">一、蓝牙的概述</h1>
<p>1999年蓝牙1.0发布，紧随其后的是蓝牙2.1。蓝牙2.1的版本使用最广，很多产品都是这个版本，也就是我们所谓的经典蓝牙，以前非智能手机也是支持这个版本的。到了蓝牙3.0，又名为高速蓝牙，在2.1的基础上大大提升了传输速度(24Mbps)。后面4.0 / 4.1引入了低功耗蓝牙。蓝牙5.0也已经发布。主要是在信号范围，连接速度，以及广播速度进行了优化，蓝牙5.0还对物联网方向做了单独的改进。</p>
<p>**一般一个蓝牙可以同时支持7个设备。**相关拓展阅读<a href="https://blog.csdn.net/weixin_35011300/article/details/112137779">android 获取蓝牙已连接的设备_冷知识：一个蓝牙可同时连接多个蓝牙设备</a></p>
<ul>
<li>
<p><strong>蓝牙模块</strong><br>
是指集成蓝牙功能的芯片基本电路集合，用于短距离2.4G的无线通讯模块。对于最终用户来说，蓝牙模块是半成品，通过在模块的基础上功能再开发、封装外壳等工序，实现能够利用蓝牙通讯的最终产品。</p>
</li>
<li>
<p><strong>经典蓝牙</strong><br>
泛指支持蓝牙协议在4.0以下的模块，一般用于数据量比较大的传输，如：语音、音乐等较高数据量的传输。<br>
经典蓝牙模块又可细分为：<em><strong>传统蓝牙和高速蓝牙模块。</strong></em><br>
传统蓝牙模块在2004年推出，主要代表是支持蓝牙2.1协议的模块，在智能手机爆发的时期得到了广泛的使用。<br>
高速蓝牙模块在2009年推出，速率提高到约<strong>24Mbps</strong>，传输速率是经典蓝牙的八倍，可以轻松的应用于录像机到电视、PC到PMP、UMPC到打印机之间的资料传输。<br>
传统蓝牙有3个功率级别，Class1,Class2,Class3,分别支持100m,10m,1m的传输距离。</p>
</li>
<li>
<p><strong>BLE蓝牙</strong><br>
全称是<strong>Bluetooth Low Energy</strong>，简称BLE。是指支持蓝牙协议4.0或以上的模块，也被称为BLE模块，最大的特点就是成本和功耗的降低，可以应用于实时性要求较高的产品当中，比如：智能家居类（蓝牙锁、蓝牙灯）、传感设备的数据发送（血压计、温度传感器）、消费类电子（电子烟、遥控玩具）等。</p>
<p>蓝牙低功耗技术是低成本、短距离、可互操作的鲁棒性（是英文robustness一词的音译,也可意译为稳健性）无线技术，工作在<strong>免许可的2.4GHz ISM射频频段</strong>。因为BLE技术采用非常快速的连接方式，<strong>因此平时可以处于“非连接”状态（节省能源）</strong>，此时链路两端相互间只是知晓对方，只有在必要时才开启链路，然后在尽可能短的时间内关闭链路(<strong>每次最多传输20字节</strong>)。低功耗蓝牙无功率级别，一般发送功率在7dBm，一般在空旷距离，达到20m应该是没有问题。</p>
<p>低功耗蓝牙中则有一个主设备（Central）和从设备（Peripheral，也叫外围设备）的概念。主设备作为发现方，调用发现设备的方法，通过<code>BluetoothAdapter#startLeScan()</code>方法实现。从设备则作为被发现方，发出广播，以供发现。同样，这个<code>startLeScan()</code>方法也仅能够发现低功耗蓝牙从设备。</p>
</li>
<li>
<p><strong>经典蓝牙与低功耗蓝牙的区别</strong><br>
低功耗蓝牙和传统蓝牙其实是有很大的区别的，<strong>低功耗蓝牙是NOKIA的Wibree标准上发展起来的。</strong><br>
在功耗上，传统蓝牙有三个级别的功耗，class1、class2、class3分别支持100m、10m、1m的传输距离，一般要求至少使用两节3A电池。而且工作几天或者几周就没电了；低功耗蓝牙却没有功耗级别，一般发送功率在7dbm左右，一个纽扣电池就可以工作一两年，3A电池的电量一般是纽扣电池的10至12倍。<br>
BLE5.0模块可支持蓝牙<strong>Mesh技术</strong>。</p>
<blockquote>
<p>正所谓有得必有失，低功耗带来的低传输速率，当然BLE被设计的本来就是传输少量数据的，对于很多传感器设备，例如心跳带，血压计等设备，是非常适合的。</p>
</blockquote>
</li>
<li>
<p><strong>BLE on Android</strong><br>
Android OS从4.3(<code>Jelly Bean</code>，API 18)才开始支持低功耗蓝牙，但是仅仅是支持中心（Central）模式——所谓的主设备，可以连接其他蓝牙外设。</p>
<p>直到2014.6.26 Android 5.0(<code>Lollipop</code>，API 21)的面世，才带来了周边API的支持(<code>BluetoothLeAdvertiser</code>)——即Android 5.0版本以后的手机可以作为一个外设（从设备，Peripheral，也叫外围设备）来进行发布。</p>
<p>Android SDK中BLE相关的API都在<code>android.bluetooth.*</code>下面，同时在Android 5.0也引入了一些也需要用到<code>android.bluetooth.le*</code>下面的API。另外，要在APP中使用蓝牙功能，需要在<code>AndroidManifest.xml</code>文件中配置申请蓝牙相关的权限声明。在Android 6.0 及以上平台中，还需要申请定位权限。</p>
</li>
</ul>
<hr>
<h1 id="二-经典蓝牙-传统蓝牙的工作流程">二、经典蓝牙、传统蓝牙的工作流程</h1>
<ol>
<li><strong>发现设备</strong>
<ul>
<li><strong>经典蓝牙</strong><br>
经典蓝牙设备发现其它经典蓝牙设备的方式是调用<code>BluetoothAdapter#startDiscovery()</code>方法。</li>
<li><strong>BLE蓝牙</strong><br>
通过<code>BluetoothAdapter#startLeScan()</code>方法去扫描发现设备。</li>
</ul>
</li>
</ol>
<blockquote>
<p><code>BluetoothAdapter.startDiscovery</code>在大多数手机上是可以同时发现经典蓝牙和BLE的，但是<code>startDiscovery</code>的回调无法返回BLE的广播，所以无法通过广播识别设备，且<code>startDiscovery</code>扫描BLE的效率比<code>startLeScan</code>低很多。所以在实际应用中，还是<code>startDiscovery</code>和<code>startLeScan</code>分开扫，前者扫传统蓝牙，后者扫低功耗蓝牙。<br>
注意：当两种蓝牙设备被某设备（包括当前的设备）配对 / 绑定后，可能不会再被扫描到。</p>
</blockquote>
<ol start="2">
<li>
<p><strong>配对 / 绑定设备</strong><br>
不管是经典蓝牙还是低功耗蓝牙，绑定方法都是通用的，可以调用相同的绑定方法。<br>
关于配对与绑定的具体介绍，可以参考<a href="http://blog.chinaunix.net/uid-21411227-id-5833051.html"><strong>BLE 配对与绑定过程详细解析、蓝牙配对与绑定的过程</strong></a>。</p>
</li>
<li>
<p><strong>建立连接</strong></p>
<ul>
<li>
<p><strong>经典蓝牙</strong><br>
经典蓝牙建立连接的方式实际上就是<code>Socket</code>的连接的建立。只不过这里不是直接用<code>Socket</code>，而是<code>BluetoothSocket</code>。获取<code>BluetoothSocket</code>的方式也很简单，利用搜索找到的<code>BluetoothDevice</code>，调用其方法<code>createRfcommSocketToServiceRecord(UUID)</code>。最后，使用获取到的<code>BluetoothDevice</code>调用其方法<code>connect()</code>就建立了经典蓝牙设备之间的连接通道。</p>
</li>
<li>
<p><strong>BLE蓝牙</strong><br>
先通过<code>BluetoothAdapter</code>的<code>getRemoteDevice(address)</code>方法获取对应BLE从设备的<code>BluetoothDevice</code>，其中的address为目标蓝牙设备MAC地址；然后通过此<code>BluetoothDevice#connectGatt(this, false, mGattCallback)</code>方法获取设备连接。<br>
此时的连接，只能够进行监听，也就是获取到当前BLE从设备广播出来的数据。</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>在蓝牙设备中，存在着物理地址，我们也叫作蓝牙的MAC地址，这个地址是唯一的，就像咱们网络上的IP地址。同时还存在着一个叫做UUID的东西，可以把它理解为是IP地址中的端口号。<br>
正如知道了IP地址和端口号，就知道了怎么链接到目标网络服务器位置，知道了蓝牙设备的MAC地址和UUID也就能够确定到具体是哪一台蓝牙设备了，这两者合起来就是蓝牙的唯一身份标识。</p>
</blockquote>
<ol start="4">
<li><strong>数据通信</strong>
<ul>
<li>
<p><strong>经典蓝牙</strong><br>
当建立连接后，就可以直接使用<code>BluetoothSocket#getOutputStream()</code>方法获取输出流写入需要发送的数据。读取发送回来的数据，则是调用<code>BluetoothSocket#getInputStream()</code>方法获取输入流读取。<strong>这点和Java中的Socket通信几乎是一模一样</strong>。</p>
</li>
<li>
<p><strong>BLE蓝牙</strong><br>
想要实现主设备对从设备的数据发送，则需要直接读取获取到的从设备的<code>Characteristic</code>，而<code>Characteristic</code>又是<code>Service</code>下面的一层，所以操作顺序是：</p>
<p>1.通过BLE从设备相应的<code>Service_UUID</code>获取对应的<code>BluetoothGattService</code>，获取方法是：使用<code>BluetoothDevice的connectGatt(this, false, mGattCallback)</code>方法返回的<code>BluetoothGatt</code>对象，调用<code>BluetoothGatt的方法getService(Service_UUID)</code>获取相应的<code>BluetoothGattService</code>；</p>
<p>2.调用<code>BluetoothGattService</code>和对应的<code>Characteristic</code>的写入<code>UUID</code>获取相应的<code>BluetoothGattCharacteristic</code>，获取方法是：调用<code>BluetoothGattService</code>的<code>getCharacteristic(Characteristic_UUID)</code>方法获得；</p>
<p>3.设置需要发送的命令值，调用<code>BluetoothGattCharacteristic的方法setValue(value)进行设置</code>，<strong>其中value一般为byte[]</strong>；</p>
<p>4.最后，使用<code>BluetoothGatt</code>的写入方法<code>writeCharacteristic(TxChar)</code>完成命令发送。<br>
可以看到，想要实现BLE的数据通信，步骤相当繁琐，这里只是做一个简单的概念理解，<strong>如果想要获取到BLE从设备的返回值，还需要设置Notification</strong>，然后调用<code>BluetoothGatt的readCharacteristic(characteristic)方法</code>进行数据的读取。</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>两种蓝牙的流程<br>
发现设备-&gt;配对/绑定设备-&gt;建立连接-&gt;数据通信<br>
低功耗蓝牙设备版本要求<br>
当设备是目标连接设备时，Android版本最低为Android 4.3以上系统<br>
当设备是发起连接设备时，Android版本最低为Android 5.0以上系统</p>
</blockquote>
<hr>
<h1 id="三-蓝牙的选用">三、蓝牙的选用</h1>
<p>既然有经典蓝牙和低功耗蓝牙之分，我们在设计物联网产品和智能硬件产品的时候，如何选择呢？</p>
<ul>
<li><strong>经典蓝牙</strong><br>
蓝牙最初的设计意图，是打电话放音乐。3.0版本以下的蓝牙，都称为“经典蓝牙”。<strong>功耗高、传输数据量大、传输距离只有10米。</strong></li>
<li><strong>BLE蓝牙</strong><br>
就是BLE，通常说的蓝牙4.0（及以上版本）。<strong>低功耗，数据量小，距离50米左右。</strong></li>
</ul>
<p>**传声音的，用经典蓝牙：**如蓝牙耳机、蓝牙音箱。蓝牙设计的时候就是为了传声音的，所以是近距离的音频传输的不二选择。</p>
<p>**电池供电、连手机APP的，用BLE：**如共享单车锁、蓝牙智能锁、蓝牙防丢器、蓝牙室内定位，是目前手机和智能硬件通信的性价比最高的手段。直线距离约50米，一节5号电池能用一年，传输模组成本10块钱，远比WIFI、4G等大数据量的通信协议更实用。</p>
<p>**又要声音又要数据的，用双模蓝牙：**双模蓝牙，就是同时支持经典蓝牙音频和低功耗蓝牙。如智能电视遥控器、降噪耳机等。很多智能电视配的遥控器带有语音识别，需要用经典蓝牙才能传输声音。</p>
<p>**传大数据量的，用经典蓝牙：**如某些工控场景，使用Android或Linux主控，外挂蓝牙遥控设备的，可以使用经典蓝牙里的SPP协议，当作一个无线串口使用。速度比BLE传输快多了。</p>
<p>**远距离的，不用蓝牙。**固定供电的、不考虑功耗的、要传超过几十米距离的、要传高速数据的，这些都不适合蓝牙。远距离的可以用2G、4G、NB-IOT，大数据量的可以用WIFI。</p>
<hr>
<h1 id="拓展阅读">拓展阅读</h1>
<ul>
<li><a href="https://www.jianshu.com/p/fc46c154eb77/">Android经典蓝牙开发简介</a></li>
<li><a href="https://www.jianshu.com/p/a27f3ca027e3">安卓BLE蓝牙开发详解</a></li>
<li><a href="https://www.jianshu.com/p/f98e77c9ec65">Android-BLE蓝牙原理</a></li>
<li><a href="https://blog.csdn.net/zqf_888/article/details/80982337">Android蓝牙开发—经典蓝牙和BLE（低功耗）蓝牙的区别</a></li>
<li><a href="https://blog.csdn.net/zqf_888/article/details/81196766?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.vipsorttest&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.vipsorttest">Android蓝牙开发—BLE（低功耗）蓝牙详细开发流程</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Android】初中高级开发工程师面试复习点]]></title>
        <id>https://jgduan.github.io/post/android-chu-zhong-gao-ji-kai-fa-gong-cheng-shi-mian-shi-fu-xi-dian/</id>
        <link href="https://jgduan.github.io/post/android-chu-zhong-gao-ji-kai-fa-gong-cheng-shi-mian-shi-fu-xi-dian/">
        </link>
        <updated>2021-03-15T02:44:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>本文面试知识点主要针对大部分合肥IT公司面试准备，如有不妥之处，欢迎各位批评指正。</p>
<hr>
<h1 id="一-常用组件activity-service-broadcastreceiver-contentprovider-intent">一、常用组件（Activity、Service、BroadcastReceiver、ContentProvider、Intent）</h1>
<h2 id="1-activity-fragment">1. Activity / Fragment</h2>
<ul>
<li>
<p><strong>Activity</strong></p>
<ul>
<li>Activity生命周期、常见类型概述
<ul>
<li><a href="https://www.jianshu.com/p/be83ab830dad">【Android】初识Activity(一)</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fcrazy_zihao%2Farticle%2Fdetails%2F50786529">【Android】常见面试题(一)</a></li>
</ul>
</li>
<li>Activity的启动模式、每个启动模式的不同点是什么？
<ul>
<li><a href="https://www.jianshu.com/p/be83ab830dad">【Android】初识Activity(一)</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fcrazy_zihao%2Farticle%2Fdetails%2F50786529">【Android】常见面试题(一)</a></li>
</ul>
</li>
<li>如何在非活动Activity内存不足时被系统销毁前保存数据？
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.163.com%2Fitcast_android%2Fblog%2Fstatic%2F215029084201302810813292%2F">Activity的onSaveInstanceState()和 onRestoreInstanceState()方法</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fshulianghan%2Farticle%2Fdetails%2F38297083">【Android 应用开发】Activity 状态保存 OnSaveInstanceState参数解析</a></li>
</ul>
</li>
<li>横竖屏切换时，Activity的生命周期会有哪些变化？
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fjiangxinyu%2Farticle%2Fdetails%2F8600407">Android横竖屏切换总结</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fhzw19920329%2Farticle%2Fdetails%2F51345971">android-----横竖屏切换对Activity生命周期的影响</a></li>
</ul>
</li>
<li>Activity如何设置为Dialog样式？
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fthunderrong%2Farticle%2Fdetails%2F52237666">将Android Activity设置成对话框样式</a></li>
</ul>
</li>
<li>如何退出多个Activity（App如何一键退出）？
<ul>
<li><a href="https://www.jianshu.com/p/269873a16937">Android小技巧： 这里涵盖了所有实现 “一键退出 App” 的方法</a></li>
<li><a href="https://www.jianshu.com/p/197cb31bdb37">Android面试题-app优雅退出</a></li>
<li><a href="https://www.jianshu.com/p/588b663ceebc">Android APP一键退出的方法总结分析</a></li>
</ul>
</li>
<li>Context、Application、Activity的区别与联系？
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.cnblogs.com%2Fwenjiang%2Farchive%2F2012%2F10%2F15%2F2724923.html">Context-----Activity,Application之间的交流使者</a></li>
</ul>
</li>
<li>Activity之间进行数据传递的方式有哪些？
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fpangrongxian%2Farticle%2Fdetails%2F50166835">Android基础之Activity系列 - Activity间的数据传递</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Fragment</strong></p>
<ul>
<li>Fragment的作用以及生命周期概述(重点在于与Activity生命周期不同之处)</li>
<li>Fragment如何与Activity进行数据交互、Fragment与Fragment之间如何进行数据交互？</li>
<li>Fragment的两种使用方法描述(replace、add)<br>
<a href="https://www.jianshu.com/p/a830dde8355c">【Android】Fragment初探索</a><br>
<a href="https://www.jianshu.com/p/d9143a92ad94">Fragment全解析系列（一）：那些年踩过的坑</a><br>
<a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fchenliguan%2Farticle%2Fdetails%2F53906934">Android进阶之Fragment与Activity之间的数据交互</a><br>
<a href="https://www.jianshu.com/p/f87baad32662">【Android】Fragment之间数据传递的三种方式</a></li>
</ul>
</li>
</ul>
<h2 id="2-service">2. Service</h2>
<ul>
<li><strong>Service两种启动模式的区别是什么？</strong></li>
<li><strong>Service的生命周期有哪些？</strong></li>
<li><strong>Activity如何与Service进行通讯？</strong><br>
<a href="https://www.jianshu.com/p/1e49e93c3ec8">【Android】Service那点事儿</a><br>
<a href="https://www.jianshu.com/p/5505390503fa">【Android】Service前台服务的使用</a><br>
<a href="https://www.jianshu.com/p/4a83becd758e">【Android】远程服务(Remote Service)的使用</a></li>
</ul>
<h2 id="3-broadcastreceiver">3. BroadcastReceiver</h2>
<ul>
<li><strong>BroadcastReceiver广播类型有哪几种？</strong></li>
<li><strong>BroadcastReceiver有哪几种注册方式？</strong><br>
<a href="https://link.jianshu.com/?t=https%3A%2F%2Fmy.oschina.net%2FAaronCN%2Fblog%2F415349">国内目前最全面的介绍——Android中的BroadCastReceiver</a><br>
<a href="https://www.jianshu.com/p/ca3d87a4cdf3">Android四大组件：BroadcastReceiver史上最全面解析</a></li>
</ul>
<h2 id="4-contentprovider">4. ContentProvider</h2>
<ul>
<li><strong>什么是Content Provider？Content Provider如何用？</strong>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.cnblogs.com%2Fdevinzhang%2Farchive%2F2012%2F01%2F20%2F2327863.html">Android之ContentProvider总结</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fcodingnow.cn%2Fandroid%2F1078.html">android ContentProvider使用详解</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fcrazy_zihao%2Farticle%2Fdetails%2F50833197">【Android】常见面试题(二)</a></li>
</ul>
</li>
</ul>
<h2 id="5-intent">5. Intent</h2>
<ul>
<li><strong>什么是Intent，它主要做什么？</strong></li>
<li><strong>Intent可以传递哪些数据类型的参数(重点在Bundle中的序列化数据)？</strong></li>
<li><strong>IntentFilter是什么？它与Intent的区别是什么？</strong><br>
<a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fzuolongsnail%2Farticle%2Fdetails%2F6574211">Android中Intent组件详解</a><br>
<a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fiispring%2Farticle%2Fdetails%2F48417779">Android中Intent概述及使用</a><br>
<a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fiispring%2Farticle%2Fdetails%2F48481793">Android中Intent对象与Intent Filter过滤匹配过程详解</a></li>
</ul>
<hr>
<h1 id="二-常用控件">二、常用控件</h1>
<h2 id="1-listview">1. ListView</h2>
<ul>
<li><strong>ListView内如何显示不同样式的item</strong>
<ul>
<li><a href="https://www.jianshu.com/p/b7091e43c971">Android ListView实现多种Item布局</a></li>
</ul>
</li>
<li><strong>ListView内图片错位、item中按钮点击错位、checkBox错位原因分析与解决方案描述</strong>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.jb51.net%2Farticle%2F71314.htm">Android中ListView异步加载图片错位、重复、闪烁问题分析及解决方案</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Flemon_tree12138%2Farticle%2Fdetails%2F39337867">Android：ListView常见错位之CheckBox错位</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fjason0539%2Farticle%2Fdetails%2F45241957">Android错误之ListView加载错位_ListView图片错位</a></li>
</ul>
</li>
</ul>
<h2 id="2-scrollview">2. ScrollView</h2>
<ul>
<li><strong>ScrollView内嵌套ListView会产生哪些冲突？如何解决？</strong>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fu012975705%2Farticle%2Fdetails%2F50034847">解决ScrollView或ListView中嵌套ListView引起的冲突--ListView显示不全问题</a>**</li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2FMr_wzc%2Farticle%2Fdetails%2F51778853">利用事件分发机制解决ScrollView嵌套ListView滑动冲突</a>**</li>
</ul>
</li>
<li><strong>ScrollView在水平、竖直情况下的使用场景</strong></li>
</ul>
<h2 id="3-recyclerview">3. RecyclerView</h2>
<ul>
<li><a href="https://www.jianshu.com/p/8aa02e723379">Android RecyclerView 使用完全解析 体验艺术般的控件</a></li>
</ul>
<h2 id="4-nestedscrollview">4. NestedScrollView</h2>
<ul>
<li><a href="https://www.jianshu.com/p/1806ed9737f6/">一点见解: Android嵌套滑动和NestedScrollView</a></li>
<li><a href="https://segmentfault.com/a/1190000002873657">Android 嵌套滑动机制（NestedScrolling）</a></li>
<li><a href="https://www.jianshu.com/p/760c08f0fded">CoordinatorLayout使用（三）：NestedScrollView &amp; 嵌套滑动事件</a></li>
</ul>
<h2 id="5-coordinatorlayoutappbarlayout">5. CoordinatorLayout+AppbarLayout</h2>
<ul>
<li><a href="https://www.jianshu.com/p/eec5a397ce79">CoordinatorLayout 学习(一) - CoordinatorLayout的基本使用</a></li>
<li><a href="https://www.jianshu.com/p/bbc703a0015e">AppbarLayout的简单用法</a></li>
<li><a href="https://www.jianshu.com/p/ab04627cce58">Android 初识AppBarLayout 和 CoordinatorLayout</a></li>
</ul>
<h2 id="6-floatingactionbuttonsnackbar">6. FloatingActionButton+Snackbar</h2>
<ul>
<li><a href="https://www.jianshu.com/p/f2a4df406948">FloatingActionButton(悬浮按钮)</a></li>
<li><a href="https://blog.csdn.net/gaolh89/article/details/79759404">FloatingActionButton基本使用及踩坑记录</a></li>
<li><a href="https://blog.csdn.net/qq_19431333/article/details/52862348">Android开发——Snackbar使用详解</a></li>
<li><a href="https://www.jianshu.com/p/9eb3b17b0e77">Android 一文告诉你到底是用Dialog，Snackbar，还是Toast</a></li>
</ul>
<hr>
<h1 id="三-性能优化">三、性能优化</h1>
<h2 id="1-oom问题分析如何避免oom">1. OOM问题分析，如何避免OOM？</h2>
<ul>
<li><a href="https://www.jianshu.com/p/f5d8d3066b36">Android避免OOM（内存优化）</a></li>
</ul>
<h2 id="2-内存溢出out-of-memory与内存泄漏memory-leak的区别">2. 内存溢出(out of memory)与内存泄漏(memory leak)的区别</h2>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fsinat_29255093%2Farticle%2Fdetails%2F52556760">Android 内存溢出和内存泄漏的区别</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.jb51.net%2Farticle%2F108109.htm">Android 内存溢出和内存泄漏的问题</a></li>
</ul>
<h2 id="3-gc回收机制">3. GC回收机制</h2>
<ul>
<li><a href="https://www.jianshu.com/p/8c6cf3d7a98a">简析Android的垃圾回收与内存泄露</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.cnblogs.com%2Fjeffwongishandsome%2Fp%2Ftalk-about-GC-and-how-to-use-GC-better.html">垃圾回收机制GC知识再总结兼谈如何用好GC</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fqq_35681180%2Farticle%2Fdetails%2F53290466">详解GC机制，gc机制，Android垃圾回收机制的底层描述</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.360doc.com%2Fcontent%2F15%2F1021%2F08%2F14416931_507224558.shtml%23">Android GC那点事儿</a></li>
</ul>
<h2 id="4-线程与线程池">4. 线程与线程池</h2>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fu011889786%2Farticle%2Fdetails%2F51516981">Android线程与线程池</a></li>
</ul>
<h2 id="5-imageloader的缓存机制是什么这个不会刻意阐述lrucache-disklrucache这两个的原理即可或者是其它如glide-picso图片缓存原理">5. ImageLoader的缓存机制是什么？(这个不会刻意阐述LruCache、DiskLruCache这两个的原理即可或者是其它如Glide、Picso图片缓存原理)</h2>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.cnblogs.com%2Fkissazi2%2Fp%2F3931400.html">从源代码分析Android-Universal-Image-Loader的缓存处理机制</a></li>
</ul>
<h2 id="6-anr出现的场景及解决办法">6. ANR出现的场景及解决办法</h2>
<ul>
<li><a href="https://www.jianshu.com/p/6d855e984b99">Android App优化之ANR详解</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fhubingforever.blog.163.com%2Fblog%2Fstatic%2F17104057920126297441480%2F">Android中对付ANR的N种武器</a></li>
<li><a href="https://www.jianshu.com/p/7fd95bc2a55c">android ANR发生的原因总结和解决办法</a></li>
</ul>
<h2 id="7-如何使用traceview做数据分析">7. 如何使用traceview做数据分析</h2>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.jobbole.com%2F78995%2F">正确使用Android性能分析工具——TraceView</a></li>
</ul>
<h2 id="8-如何使用heap做内存分析as场景刻意直接用android-monitor工具怼出去答对即可这方面可以说一些使用leakcanary工具进行内存泄漏分析的过程">8. 如何使用Heap做内存分析(AS场景刻意直接用Android Monitor工具怼出去，答对即可，这方面可以说一些使用LeakCanary工具进行内存泄漏分析的过程)</h2>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.jcodecraeer.com%2Fa%2Fanzhuokaifa%2Fandroidkaifa%2F2015%2F0509%2F2854.html">LeakCanary:检测所有的内存泄漏</a></li>
</ul>
<hr>
<h1 id="四-进阶技能">四、进阶技能</h1>
<h2 id="1-android事件分发机制分析">1. Android事件分发机制分析</h2>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fguolin_blog%2Farticle%2Fdetails%2F9097463">Android事件分发机制完全解析，带你从源码的角度彻底理解(上)</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fguolin_blog%2Farticle%2Fdetails%2F9153747">Android事件分发机制完全解析，带你从源码的角度彻底理解(下)</a></li>
</ul>
<h2 id="2-android数据持久化方式有哪些">2. Android数据持久化方式有哪些？</h2>
<ul>
<li><a href="https://www.jianshu.com/p/5632599d0394">【Android】数据库版本控制</a></li>
</ul>
<h2 id="3-自定义view常用方法及其作用介绍最好包含自定义属性">3. 自定义View常用方法及其作用介绍(最好包含自定义属性)</h2>
<h2 id="4-android动画有哪些种类补间动画-帧动画-属性动画">4. Android动画有哪些种类？(补间动画、帧动画、属性动画)</h2>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fguolin_blog%2Farticle%2Fdetails%2F43536355">Android属性动画完全解析(上)，初识属性动画的基本用法</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fguolin_blog%2Farticle%2Fdetails%2F43816093">Android属性动画完全解析(中)，ValueAnimator和ObjectAnimator的高级用法</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fguolin_blog%2Farticle%2Fdetails%2F44171115">Android属性动画完全解析(下)，Interpolator和ViewPropertyAnimator的用法</a></li>
</ul>
<h2 id="5-android-ipc机制">5. Android IPC机制</h2>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.cnblogs.com%2Fcr330326%2Fp%2F6340958.html">Android中的IPC机制</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fu012760183%2Farticle%2Fdetails%2F51397014">Android中实现IPC的几种方式详细分析及比较</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fluoshengyang%2Farticle%2Fdetails%2F6618363">Android进程间通信（IPC）机制Binder简要介绍和学习计划</a></li>
</ul>
<h2 id="6-handler-looper-messagequeue与message之间的关系">6. Handler、Looper、MessageQueue与Message之间的关系</h2>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.cnblogs.com%2Fangeldevil%2Fp%2F3340644.html">Android消息处理机制(Handler、Looper、MessageQueue与Message)</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.cnblogs.com%2Ftt_mc%2Farchive%2F2012%2F01%2F30%2F2331876.html">Android Looper和Handler</a></li>
<li><a href="https://link.jianshu.com/?t=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F22284788%3Frefer%3Dmobdev">Thread、Handler和HandlerThread关系何在？</a></li>
</ul>
<h2 id="7-android-ndk的一些开发资料">7. Android NDK的一些开发资料</h2>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fqiujuer%2Farticle%2Fdetails%2F42040963">【Android】 环境配置之Android Studio开发NDK</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fyanbober%2Farticle%2Fdetails%2F45309049">NDK-JNI实战教程（一） 在Android Studio运行第一个NDK程序</a></li>
</ul>
<hr>
<h1 id="五-架构及三方库">五、架构及三方库</h1>
<h2 id="1-知名第三方库如okhttp-glide-exoplayer-picso-gson-eventbus等">1. 知名第三方库：如OkHttp、Glide、EXOPlayer、Picso、Gson、EventBus等</h2>
<ul>
<li><strong>OkHttp</strong>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Flmj623565791%2Farticle%2Fdetails%2F48129405">Android Https相关完全解析 当OkHttp遇到Https</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Flmj623565791%2Farticle%2Fdetails%2F47911083">Android OkHttp完全解析 是时候来了解OkHttp了</a></li>
</ul>
</li>
<li><strong>Glide</strong>
<ul>
<li><a href="https://www.jianshu.com/p/34cac7ec531e">Glide 图片加载库详细用法</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fguolin_blog%2Farticle%2Fdetails%2F54895665">深入探究Glide的缓存机制</a></li>
</ul>
</li>
</ul>
<h2 id="2-应用架构设计mvp-mvvm框架的了解dagger2-butterkinfe-databinding-rxandroid-rxjava-retrofit-20的使用等等">2. 应用架构设计：MVP、MVVM框架的了解，Dagger2、ButterKinfe、Databinding、RxAndroid、RxJava、Retrofit 2.0的使用等等</h2>
<ul>
<li><strong>MVP / MVVP</strong>
<ul>
<li><a href="https://www.jianshu.com/p/57e5f75e9408">Android开发中的MVP架构以及性能优化</a></li>
<li><a href="https://www.jianshu.com/p/2fbb3fc84449">Android开发架构选择MVP or MVVM</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.cnblogs.com%2FBoBoMEe%2Fp%2F5573447.html">浅谈Android架构之MVP,MVVM</a></li>
</ul>
</li>
<li><strong>Dagger2</strong>
<ul>
<li><a href="https://www.jianshu.com/p/39d1df6c877d">Dagger2从入门到放弃再到恍然大悟</a></li>
</ul>
</li>
<li><strong>ButterKnife</strong>
<ul>
<li><a href="https://www.jianshu.com/p/b6fe647e368b">绝对不容错过，ButterKnife使用详谈</a></li>
</ul>
</li>
<li><strong>DataBinding</strong>
<ul>
<li><a href="https://www.jianshu.com/p/de4d50b88437">DataBinding实现原理探析</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fqq_33689414%2Farticle%2Fdetails%2F52205703">DataBinding的基本使用（一）</a></li>
</ul>
</li>
<li><strong>RxJava / RxAndroid</strong>
<ul>
<li><a href="https://www.jianshu.com/p/ebb62bf3d25f">RxJava+MVP模式下的Nucles框架</a></li>
<li><a href="https://www.jianshu.com/p/464fa025229e">给初学者的RxJava2.0教程(一)</a></li>
<li><a href="https://www.jianshu.com/p/d149043d103a">手把手教你使用 RxJava 2.0（一）</a></li>
<li><a href="https://www.jianshu.com/p/ace5af3051ee">Android开发的又一个方向之 RxJava 详解</a></li>
<li><a href="https://www.jianshu.com/p/031745744bfa">RxJava/RxAndroid 使用实例实践</a></li>
</ul>
</li>
<li><strong>Retrofit</strong>
<ul>
<li><a href="https://www.jianshu.com/p/308f3c54abdd">你真的会用Retrofit2吗?Retrofit2完全教程</a></li>
</ul>
</li>
<li><strong>RxJava + Retrofit</strong>
<ul>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fgank.io%2Fpost%2F56e80c2c677659311bed9841">RxJava 与 Retrofit 结合的最佳实践</a></li>
</ul>
</li>
</ul>
<h2 id="3-jetpack全家桶">3. Jetpack全家桶</h2>
<ul>
<li><strong>DataBinding</strong></li>
<li><strong>Lifecycles</strong></li>
<li><strong>LiveData</strong></li>
<li><strong>Navigation</strong></li>
<li><strong>Paging</strong></li>
<li><strong>ViewModel</strong></li>
<li><strong>WorkManager</strong></li>
<li><strong>AppCompat</strong></li>
<li><strong>Room</strong></li>
<li><strong>CameraX</strong></li>
<li><strong>DownloadManager</strong></li>
</ul>
<hr>
<h1 id="六-其它">六、其它</h1>
<h2 id="1-关于版本控制svngit都来点才好">1. 关于版本控制，SVN/Git都来点才好</h2>
<ul>
<li><a href="https://link.jianshu.com/?t=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰Git教程</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fbruce_6%2Farticle%2Fdetails%2F38299677">git和SVN的区别</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.jobbole.com%2F31444%2F">Git 和 SVN 之间的五个基本区别</a></li>
</ul>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【JJQ】Android开发规范（注释、命名、打包）]]></title>
        <id>https://jgduan.github.io/post/jjq-android-kai-fa-gui-fan-zhu-shi-ming-ming-da-bao/</id>
        <link href="https://jgduan.github.io/post/jjq-android-kai-fa-gui-fan-zhu-shi-ming-ming-da-bao/">
        </link>
        <updated>2021-02-26T03:15:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p><strong>统一、规范的命名有助于提升项目协作效率，也让代码的可读性、可维护性变得更加友好。</strong><br>
这里根据<a href="http://www.360sdn.com/2013/android_0517/144.html?ckvcbc=yz6j13"><strong>Google Android编程规范</strong></a>来对公司客户端研发输出一份相对全面、清晰的Android代码命名规范，如有异议，欢迎批评指正。</p>
<hr>
<h1 id="关于注释">关于注释</h1>
<p>在开发过程中，类、生僻对象命名、方法原则上都要加上相关注释，说明含义、用途。</p>
<hr>
<h1 id="各对象暂定的命名规范">各对象暂定的命名规范</h1>
<ul>
<li><strong>项目名称(Project name)</strong>
<ul>
<li>命名规则：<code>大驼峰式命名</code>，单词间连续无间隔；</li>
<li>示例：如新建一个名为BaiYaoWanJia的项目。</li>
</ul>
</li>
<li><strong>模块命名(Module-Library name)</strong>
<ul>
<li>命名规则：Library name采用<code>大驼峰式命名</code>，单词间连续无间隔，Module name会自动生成，不需修改；</li>
<li>示例：<br>
<img src="https://jgduan.github.io//post-images/1614309587721.png" alt="" loading="lazy"></li>
</ul>
</li>
<li><strong>包</strong>
<ul>
<li>命名规则：小写、单词间连续无间隔，3级包名一般为applicationId或Module的根目录，4级包名对应不同的细分模块。</li>
<li>示例：
<ul>
<li>3级包名applicationId：一般为com.公司名.项目名，如com.dohenes.bywanjia 或 com.公司名.Module name，如com.dohenes.shop；</li>
<li>4级包名：com.公司名.项目名/Module name.xxx，具体可参考下图<br>
<img src="https://jgduan.github.io//post-images/1614309652905.png" alt="" loading="lazy"></li>
</ul>
</li>
</ul>
</li>
<li><strong>类</strong>
<ul>
<li>命名规则：<code>大驼峰式命名</code>，可使用单词或者单词简写，在具体命名类时，会根据该类的类型不同而附加额外的命名规则；</li>
<li>示例：  <table>
  	  <tr>
  		  <th>类目</th>
  		  <th>类型</th>
  		  <th>命名规则描述</th>
  		  <th>命名示例</th>
  	  </tr>
  	  <tr>
  		  <th>普通java类</th>
  		  <th>java类</th>
  		  <th>大驼峰式命名法</th>
  		  <th>GetTime</th>
  	  </tr>
  	  <tr>
  		  <th rowspan="15">Android相关</th>
  		  <th>基类</th>
  		  <th>Base + 类别 / 功能</th>
  		  <th>BaseActivity / BaseFragment / BaseAdapter</th>
  	  </tr>
  	  <tr>
  		  <th>Activity</th>
  		  <th>模块名 + Activity</th>
  		  <th>LoginActivity</th>
  	  </tr>
  	  <tr>
  		  <th>Fragment</th>
  		  <th>模块名 + Fragment</th>
  		  <th>LoginFragment</th>
  	  </tr>
  	  <tr>
  		  <th>BroadcastReceiver</th>
  		  <th>功能名 + Receiver</th>
  		  <th>BootBroadcastReceiver</th>
  	  </tr>
  	  <tr>
  		  <th>Service</th>
  		  <th>模块名 / 功能名 + Service</th>
  		  <th>LoginService / BLEService</th>
  	  </tr>
  	  <tr>
  		  <th>自定义对话框Dialog</th>
  		  <th>功能名 + Dialog</th>
  		  <th>TipsDialog</th>
  	  </tr>
  	  <tr>
  		  <th>自定义View</th>
  		  <th>Custom + 功能名 + 组件名称(继承的组件名)</th>
  		  <th>CustomToast / CustomLayout</th>
  	  </tr>
  	  <tr>
  		  <th>自定义Widget</th>
  		  <th>功能名 + Widget</th>
  		  <th>LoginWidget</th>
  	  </tr>  
  	  <tr>
  		  <th>数据适配器类</th>
  		  <th>功能名 + Adapter</th>
  		  <th>WeatherAdapter</th>
  	  </tr>  
  	  <tr>
  		  <th>工具类</th>
  		  <th>功能名 + Util/Manager</th>
  		  <th>StringUtil / DatabaseManager</th>
  	  </tr>  
  	  <tr>
  		  <th>帮助类</th>
  		  <th>功能名 + Helper</th>
  		  <th>DBHelper</th>
  	  </tr>  
  	  <tr>
  		  <th>解析类</th>
  		  <th>功能名 + Parse</th>
  		  <th>GsonParse</th>
  	  </tr>   
  	  <tr>
  		  <th>异常类</th>
  		  <th>以Exception结尾</th>
  		  <th>LoginException</th>
  	  </tr>   
  	  <tr>
  		  <th>接口</th>
  		  <th>多以able或ible结尾，也可在类名前加I标明</th>
  		  <th>Runnable / Accessible / ILogin</th>
  	  </tr>   
  	  <tr>
  		  <th>回调</th>
  		  <th>功能名 + Callback</th>
  		  <th>LoginCallback</th>
  	  </tr>   
     </table>
</li>
</ul>
</li>
<li><strong>变量</strong>
<ul>
<li>命名规则：<code>小驼峰式命名</code>，在具体命名变量时，会根据该变量的类型不同而附加额外的命名规则；</li>
<li>示例：  <table>
  	  <tr>
  		  <th>类型</th>
  		  <th>命名规则描述</th>
  		  <th>命名示例</th>
  	  </tr>
  	  <tr>
  		  <th>变量</th>
  		  <th>m + 单词名</th>
  		  <th>private int mCount</th>
  	  </tr>
  	  <tr>
  		  <th>静态变量</th>
  		  <th>前缀添加s</th>
  		  <th>private static int sCount</th>
  	  </tr>
  	  <tr>
  		  <th>临时变量(代码块内的)</th>
  		  <th>小驼峰式命名</th>
  		  <th>int count</th>
  	  </tr>
  	  <tr>
  		  <th>常量</th>
  		  <th>CONSTANT_作用名</th>
  		  <th>CONSTANT_KEY_NAME</th>
  	  </tr>
  	  <tr>
  		  <th>Android UI控件</th>
  		  <th>m + 控件缩写 + 功能描述</th>
  		  <th>mTvTitle / mBtnLogin</th>
  	  </tr>
  </table>
</li>
</ul>
</li>
<li><strong>方法</strong>
<ul>
<li>命名规则：<code>小驼峰式命名</code>,在具体命名方法名时，会根据该方法名的作用不同而附加额外的命名规则；</li>
<li>示例：  <table>
  	  <tr>
  		  <th>功能</th>
  		  <th>命名规则描述</th>
  		  <th>命名示例</th>
  	  </tr>
  	  <tr>
  		  <th>初始化</th>
  		  <th>init + 单词</th>
  		  <th>初始化布局：initView()</th>
  	  </tr>
  	  <tr>
  		  <th>判断 / 校验，返回至为boolean</th>
  		  <th>is + 单词 / check + 单词</th>
  		  <th>可见性：isVisible() / checkKey()</th>
  	  </tr>
  	  <tr>
  		  <th>显示/弹出提示框</th>
  		  <th>show + 单词</th>
  		  <th>显示提示信息：showTips()</th>
  	  </tr>
  	  <tr>
  		  <th>重置数据</th>
  		  <th>reset + 单词</th>
  		  <th>重置用户数据：resetUserData()</th>
  	  </tr>
  	  <tr>
  		  <th>保存数据</th>
  		  <th>save + 单词</th>
  		  <th>保存用户名：saveUserName()</th>
  	  </tr>
  	  <tr>
  		  <th>获取数据</th>
  		  <th>get + 单词</th>
  		  <th>获取用户名：getUserName()</th>
  	  </tr>
  	  <tr>
  		  <th>清除数据</th>
  		  <th>clear + 单词</th>
  		  <th>清除用户名:clearUserName()</th>
  	  </tr>
  	  <tr>
  		  <th>移除数据</th>
  		  <th>remove + 单词</th>
  		  <th>移除用户数据:removeUserData()</th>
  	  </tr>
  	  <tr>
  		  <th>绘制相关</th>
  		  <th>draw + 单词</th>
  		  <th>绘制线条:drawLine()</th>
  	  </tr>
  </table>
</li>
</ul>
</li>
<li><strong>参数</strong>
<ul>
<li>命名规则：<code>小驼峰式命名</code>；</li>
<li>示例：如userName,phoneNumber等。</li>
</ul>
</li>
<li><strong>资源</strong>
<ul>
<li>布局资源(布局文件单词都要小写，中间用下划线_隔开)  <table>
      <tr>
          <th>类型</th>
          <th>命名规则描述</th>
          <th>命名示例</th>
      </tr>
      <tr>
          <th>activity布局</th>
          <th>activity_单词</th>
          <th>activity_main</th>
      </tr>
      <tr>
          <th>fragment布局</th>
          <th>fragment_单词</th>
          <th>fragment_main</th>
      </tr>
      <tr>
          <th>dialog布局</th>
          <th>dialog_单词</th>
          <th>dialog_tips</th>
      </tr>
      <tr>
          <th>popupwindow布局</th>
          <th>pw_单词</th>
          <th>pw_net_error</th>
      </tr>
      <tr>
          <th>列表子项布局</th>
          <th>item_单词</th>
          <th>item_message</th>
      </tr>
  </table>
</li>
<li>控件ID  <table>
      <tr>
          <th>类型</th>
          <th>命名规则描述</th>
          <th>命名示例</th>
      </tr>
      <tr>
          <th>TextView</th>
          <th rowspan="11">模块名_控件缩写_功能单词名</th>
          <th>login_tv_title</th>
      </tr>
      <tr>
          <th>EditTextView</th>
          <th>login_et_userName</th>
      </tr>
      <tr>
          <th>ImageView</th>
          <th>login_iv_userHead</th>
      </tr>
      <tr>
          <th>Button</th>
          <th>login_btn</th>
      </tr>
      <tr>
          <th>CheckBox</th>
          <th>login_cb_status</th>
      </tr>
      <tr>
          <th>RadioButton</th>
          <th>login_rb_gender</th>
      </tr>
      <tr>
          <th>ListView</th>
          <th>main_lv_message</th>
      </tr>
      <tr>
          <th>GridView</th>
          <th>main_gv_cards</th>
      </tr>
      <tr>
          <th>LinearLayout</th>
          <th>login_lt_header</th>
      </tr>
      <tr>
          <th>RelativeLayout</th>
          <th>login_rl_header</th>
      </tr>
      <tr>
          <th>FragmentLayout / TableLayout / ConstraintLayout</th>
          <th>简写对应 fl / tl / cl</th>
      </tr>
  </table>
</li>
<li>图片资源  <table>
      <tr>
          <th>类目</th>
          <th>类型</th>
          <th>命名规则描述</th>
          <th>命名示例</th>
      </tr>
      <tr>
          <th rowspan = "10">Drawable / mipmap资源</th>
          <th>普通图标</th>
          <th>ic_具体模块_功能</th>
          <th>R.drawable.ic_user_login / R.drawable.ic_launcher</th>
      </tr>
      <tr>
          <th>背景资源</th>
          <th>bg_具体模块_功能</th>
          <th>R.drawable.bg_login</th>
      </tr>
      <tr>
          <th>样式选择器(selector)</th>
          <th>selector_具体模块_适用范围</th>
          <th>R.drawable.selector_login_btn</th>
      </tr>
      <tr>
          <th>样式形状(shape)</th>
          <th>shape_具体模块_适用范围</th>
          <th>R.drawable.shape_login_btn</th>
      </tr>
  </table>
</li>
<li>动画资源  <table>
      <tr>
          <th>类型</th>
          <th>命名规则描述</th>
          <th>命名示例</th>
      </tr>
      <tr>
          <th>补间动画</th>
          <th>动画类型_方向</th>
          <th>淡入：fade_int；淡出：fade_out</th>
      </tr>
      <tr>
          <th>其余动画</th>
          <th>模块名_动画名</th>
          <th>login_jump</th>
      </tr>
  </table>
</li>
<li>Values资源  <table>
      <tr>
          <th>类型</th>
          <th>命名规则描述</th>
          <th>命名示例</th>
      </tr>
      <tr>
          <th>color</th>
          <th>模块名_color</th>
          <th>login_color</th>
      </tr>
      <tr>
          <th>style</th>
          <th>模块名_style</th>
          <th>login_style</th>
      </tr>
      <tr>
          <th>theme</th>
          <th>模块名_theme</th>
          <th>login_theme</th>
      </tr>
      <tr>
          <th>string</th>
          <th>模块名_作用名</th>
          <th>user_name</th>
      </tr>
  </table>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="关于app打包命名">关于App打包命名</h1>
<p>release版本在项目混淆、加固(目前采用360加固)的基础上，按照以下规范命名，其它情况不考虑：<br>
<a href="https://www.jianshu.com/p/d7dc4624a122"><strong>【Android】apk打包命名规则交流篇</strong></a></p>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Android】如何打包aar]]></title>
        <id>https://jgduan.github.io/post/android-ru-he-da-bao-aar/</id>
        <link href="https://jgduan.github.io/post/android-ru-he-da-bao-aar/">
        </link>
        <updated>2021-02-19T01:37:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="注意事项">注意事项</h1>
<ol>
<li><strong>主项目需要依赖aar中所依赖的远程项目，否则会报错，如果依赖的某个库的版本有冲突，需要协调解决；</strong></li>
<li><strong>资源命名要遵守统一规范，最好是添加 项目名 / Module名 为前缀做区分，以免与主项目的资源重复，避免资源名称重复引发不必要的异常；</strong>
<blockquote>
<p>关于资源前缀可以参考<a href="https://blog.csdn.net/github_37610197/article/details/89157432">编程中限定资源前缀resourcePrefix</a></p>
</blockquote>
</li>
<li><strong>如果aar包中使用了分享、统计分析、支付等第三方SDK，在主项目中需要使用的话，我们需要以主项目的ApplicationId去申请对应的appKey与appId。如果需要在aar项目中独立调试的话，那就需要修改包名与ApplicationId后才能正常使用。</strong></li>
</ol>
<hr>
<h1 id="一-原项目打包aar">一、原项目打包aar</h1>
<ol>
<li>
<p><strong>先修改项目为Library</strong><br>
需要把<code>Module</code>下的<code>build.gradle</code>中的<code>apply plugin: 'com.android.application'</code>修改为<code>apply plugin: 'com.android.library'</code></p>
</li>
<li>
<p><strong>注释build.gradle文件中的applicationId</strong><br>
把<code>Module</code>下的<code>build.gradle-defaultConfig</code>中的<code>applicationId</code>给注释掉.</p>
<pre><code class="language-java">    defaultConfig {
     // applicationId &quot;com.dohenes.login&quot;
     ...
    }
</code></pre>
</li>
<li>
<p><strong>修改<code>AndroidManifest.xml</code></strong></p>
<ul>
<li>注释<code>AndroidManifest.xml</code>中的<code>applicationId</code>(如果没有请忽略）</li>
<li>修改<code>application</code>标签为：<pre><code class="language-java">&lt;application
    android:allowBackup=&quot;true&quot;
    android:supportsRtl=&quot;true&quot;&gt;
</code></pre>
</li>
<li>注释配置的启动action<pre><code class="language-java">    &lt;intent-filter&gt;
        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
    &lt;/intent-filter&gt;
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>如果自定义了Application，需要去除，aar中是没有Application的</strong></p>
</li>
<li>
<p><strong>如果aar中有需要在Application中初始化的代码该怎么办？</strong><br>
可以写一个<code>init</code>方法或者单独写一个类，对外开放一个<code>init</code>方法让使用者传入<code>Application</code>过来即可。<br>
示例：</p>
<pre><code class="language-java">public void init(Application application) {
    // 在这里写在Application中需要初始化的代码
}
</code></pre>
</li>
<li>
<p><strong>修改完毕后直接Build-&gt;Make Module app就可以正常生产aar了，也可以点击AndroidStudio右侧的Gradle-&gt;app-&gt;Tasks-&gt;Build-&gt;assemble，生成的aar文件在app的build-&gt;outputs-&gt;aar目录下</strong><br>
<code>Build-&gt;Make Module app</code>方式生成的<code>aar</code>文件是根据配置的编译环境打包对应的<code>aar</code>包，可以通过<code>Build Variants</code> -&gt;修改<code>Module</code>的<code>active build variant</code>来切换。<br>
<img src="https://jgduan.github.io//post-images/1613703647523.png" alt="" loading="lazy"></p>
</li>
</ol>
<hr>
<h1 id="二-新建module打包aar">二、新建Module打包aar</h1>
<ol>
<li><strong>在Project下新建一个Library Module</strong><br>
<img src="https://jgduan.github.io//post-images/1613703576824.png" alt="" loading="lazy"></li>
<li><strong>在Module中添加需要打包的资源</strong></li>
<li><strong>选中Module，点击Build-&gt;Make Module 'xxx'（xxx是你的Module名）就可以正常生产aar了，生成的aar文件在module的build-&gt;outputs-&gt;aar目录下</strong><br>
<img src="https://jgduan.github.io//post-images/1613703532599.png" alt="" loading="lazy"></li>
</ol>
<hr>
<h1 id="三-如何引用aar">三、如何引用aar</h1>
<ol>
<li>
<p><strong>将aar文件复制到目标项目的app/libs目录下</strong><br>
<img src="https://jgduan.github.io//post-images/1613703751689.png" alt="" loading="lazy"></p>
</li>
<li>
<p><strong>在目标项目的app/build.gradle文件中，添加如下内容：</strong></p>
<pre><code class="language-java">repositories {
 flatDir {
     dirs 'libs' //this way we can find the .aar file in libs folder
 }
}
</code></pre>
</li>
<li>
<p><strong>在dependencies中添加对应的依赖引用即可</strong></p>
<pre><code class="language-java">implementation(name: 'xxx', ext: 'aar')// xxx为lib名
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【初中数学】八、有理数的乘法]]></title>
        <id>https://jgduan.github.io/post/chu-zhong-shu-xue-ba-you-li-shu-de-cheng-fa/</id>
        <link href="https://jgduan.github.io/post/chu-zhong-shu-xue-ba-you-li-shu-de-cheng-fa/">
        </link>
        <updated>2021-01-19T08:29:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="学习目标">学习目标</h1>
<ol>
<li><strong>掌握有理数的乘法法则，了解有理数的乘法法则的合理性；</strong></li>
<li><strong>熟练的进行有理数乘法运算；</strong></li>
<li><strong>能够利用有理数的乘法法则进行简单计算；</strong></li>
<li><strong>能够利用有理数的运算规律进行简便运算。</strong></li>
</ol>
<hr>
<h1 id="一-有理数乘法的规律">一、有理数乘法的规律</h1>
<p>例子：</p>
<ul>
<li>2 x 3 = 6</li>
<li>(-2) x 3 = -6</li>
<li>2 x (-3) = -6</li>
<li>(-2) x (-3) = 6</li>
<li>2 x 0 = 0</li>
<li>1/2 * 2 = 1</li>
</ul>
<p>结合上述例子得出以下结论：</p>
<ol>
<li><strong>两个正数相乘，结果为正数；</strong></li>
<li><strong>两个负数相乘，结果为正数；</strong></li>
<li><strong>一正一负相乘，结果为负数；</strong></li>
<li><strong>被乘数或者乘数为0时，结果是0；</strong></li>
<li><strong>乘积是1的两个数互为倒数。</strong></li>
</ol>
<blockquote>
<p>两数相乘，同号得正，异号得负，并把绝对值相乘。<br>
任何数同0相乘，都得0。<br>
注意：有理数相乘，先确定积的符号，再确定积的值。</p>
</blockquote>
<hr>
<h1 id="二-有理数乘积的符号">二、有理数乘积的符号</h1>
<p>例：观察下列各式，它们的积是正的还是负的？多个不等于0的有理数相乘，积的符号与负因数的个数有什么关系？</p>
<ol>
<li>(-1) x 2 x 3 x 4<br>
解： (-1) x 2 x 3 x 4 = - 24</li>
<li>(-1) x (-2) x 3 x 4<br>
解：(-1) x (-2) x 3 x 4 = 24</li>
<li>(-1) x (-2) x (-3) x 4<br>
解：(-1) x (-2) x (-3) x 4 = -24</li>
<li>(-1) x (-2) x (-3) x (-4)<br>
解：(-1) x (-2) x (-3) x (-4) = 24</li>
<li>(-1) x (-2) x (-3) x (-4) x 0<br>
解：(-1) x (-2) x (-3) x (-4) x 0 = 0</li>
</ol>
<p>结论：几个不等于0的因数相乘，积的符号由<strong>负因数</strong>的个数决定。当负因数有<strong>奇数</strong>个时，积的符号为<strong>负</strong>；当负因数有<strong>偶数</strong>个时，积的符号为<strong>正</strong>；只要有一个因数为0，积就为0。</p>
<blockquote>
<p>因数是指整数a除以整数b(b≠0) 的商正好是整数而没有余数，我们就说b是a的因数。</p>
</blockquote>
<hr>
<h1 id="三-有理数乘法的运算规律">三、有理数乘法的运算规律</h1>
<p>请验证下面3个等式都是成立的：</p>
<ol>
<li>5 x (-6) = (-6) x 5<br>
解：5 x (-6) = -30，(-6) x 5 = -30，两者结果相等。</li>
<li>[3 x (-4)] x (-5) = 3 x [(-4) x (-5)]<br>
解：[3 x (-4)] x (-5) = 60，3 x [(-4) x (-5)] = 60，两者结果相等。</li>
<li>5 x [3 + (-7)] = 5 x 3 + 5 x (-7)<br>
解：5 x [3 + (-7)]  = -20，5 x 3 + 5 x (-7) = -20，两者结果相等。</li>
</ol>
<p>从上面的等式中，你能总结出来什么？<br>
<strong>有理数的运算规律：</strong></p>
<ol>
<li>乘法交换律：ab = ba（两个数相乘，交换因数的位置，积相等），如：2 x 3 = 3 x 2；<br>
a x b可以记作a·b，也可以记作ab，即 a x b = a·b = ab。</li>
<li>乘法的结合律：(ab)c = a(bc)，如：(2 x 3) x 4 = 2 x (3 x 4)；<br>
三个数相乘，先把前两个数相乘，或者先把后两个数相乘，积相等。</li>
<li>乘法的分配律：a(b + c) = ab + ac，例如：2 x (3 + 4) = (2 x 3) + (2 x 4)。<br>
一个数同两个数的和相乘，等于把这个数分别同两个数相乘，再把积相加。</li>
</ol>
<hr>
<h1 id="四-例题计算">四、例题计算</h1>
<ol>
<li><strong>例1</strong><br>
计算：12 x 25 x (-1/3) x (-1/50)<br>
解1：12 x 25 x (-1/3) x (-1/50)<br>
= [12 x (-1/3)] x [25 x (-1/50)]<br>
= -4 x (-1/2)<br>
= 2<br>
解2：12 x 25 x (-1/3) x (-1/50)<br>
= 12 x 25 x 1/3 x 1/50<br>
= (12 x 1/3) x (25 x 1/50)<br>
= 4 x 1/2<br>
= 2</li>
<li><strong>例2</strong><br>
计算：(-85) x (-25) x (-4)<br>
= -85 x (25 x 4)<br>
= -85 x 100<br>
= -8500<br>
计算：(-7/8) x 15 x (-1/7)<br>
= (7/8 x 1/7) x 15<br>
= 1/8 x 15<br>
= 1又7/8</li>
</ol>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【初中数学】七、有理数的减法]]></title>
        <id>https://jgduan.github.io/post/chu-zhong-shu-xue-qi-you-li-shu-de-jian-fa/</id>
        <link href="https://jgduan.github.io/post/chu-zhong-shu-xue-qi-you-li-shu-de-jian-fa/">
        </link>
        <updated>2021-01-19T03:17:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="学习目标">学习目标</h1>
<ol>
<li><strong>理解掌握有理数的减法法则；</strong></li>
<li><strong>会进行有理数的减法运算；</strong></li>
<li><strong>能够把有理数的减法运算转化为加法运算，进而写成省略括号和加号的和的形式。</strong></li>
</ol>
<hr>
<h1 id="一-样例计算">一、样例计算</h1>
<ol>
<li>4 - 2 = 2; 4 + (-2) = 2;</li>
<li>4 -1 = 3; 4 + (-1) = 3;</li>
<li>4 - 5 = -1; 4 + (-5) = -1.</li>
<li>4 - 0 = 4; 4 + 0 = 4;</li>
<li>4 - (-1) = 5; 4 + 1 = 5;</li>
<li>4 - (-2) = 6; 4 + 2 = 6.</li>
</ol>
<p><strong>通过以上运算，得出结论：减去一个数，等于加上这个数的相反数，也可以表示为：a - b = a + (-b)。</strong></p>
<blockquote>
<p>注意：减法在运算时<strong>有2个要素要发生变化。</strong><br>
1.减号变成加号；<br>
2.减数变成相反数；<br>
如：a - b = a + (-b)。</p>
</blockquote>
<hr>
<h1 id="二-例题">二、例题</h1>
<ol>
<li>计算 (-20) + (+3) - (-5) - (+7)<br>
解： (-20) + (+3) - (-5) - (+7)<br>
= (-20) + (+3) + (+5) + (-7)<br>
= [(+3) + (+5)] + [(-20) + (-7)]<br>
= (+8) + (-27)<br>
= -19</li>
<li>计算(-72) - (-37) - (-22) - 17<br>
解：(-72) - (-37) - (-22) - 17<br>
= (-72) + (+37) + (+22) + (-17)<br>
= [(-72) + (-17)] + [(+37) + (+22)]<br>
= -89 + (+59)<br>
= -30</li>
</ol>
<hr>
<h1 id="三-有理数的减法省略括号和加号">三、有理数的减法——省略括号和加号</h1>
<p>例子：一架飞机在进行特技表演，起飞后的高度变化如下：</p>
<ol>
<li>上升4.5千米，记作+4.5千米；</li>
<li>下降3.2千米，记作-3.2千米；</li>
<li>上升1.1千米，记作+1.1千米；</li>
<li>下降1.4千米，记作-1.4千米。<br>
问，此时飞机比起飞点高了多少千米？</li>
</ol>
<p>解法1：<br>
+4.5 + (-3.2) + (+1.1) + (-1.4)<br>
= [(+4.5) + (+1.1)] + [(-3.2) + (-1.4)]<br>
= +5.6 + (-4.6)<br>
= 1</p>
<p>解法2：<br>
4.5 - 3.2 + 1.1 -1.4<br>
= 1.3 + 1.1 - 1.4<br>
= 2.4 - 1.4<br>
= 1</p>
<p><strong>解法2对比解法1，省略了加号和括号，两者的计算结果是一致的，但解法2看起来更简单明了一点。</strong><br>
在这里，我们把4.5 - 3.2 + 1.1 - 1.4看作为4.5，-3.2，1.1，-1.4的和，也叫<strong>代数和</strong>。</p>
<blockquote>
<p><strong>代数和</strong>是指两个或更多的数或量按照代数加法规律取符号(如 +或-)的总和。</p>
</blockquote>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【初中数学】六、有理数的加法]]></title>
        <id>https://jgduan.github.io/post/you-li-shu/</id>
        <link href="https://jgduan.github.io/post/you-li-shu/">
        </link>
        <updated>2021-01-18T09:18:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-有理数的加法">一、有理数的加法</h1>
<ul>
<li>
<p><strong>同号的两个有理数相加，取相同的符号，并把 <em>绝对值</em> 相加。</strong></p>
<blockquote>
<p>例如：+3 + +4 = 7；-3 + -4 = -7.</p>
</blockquote>
</li>
<li>
<p><strong>符号不同的两个有理数相加，若绝对值不相等的情况下，取绝对值较大的数的符号，并用 <em>绝对值</em> 大的数取减去<em>绝对值</em>小的获取结果。</strong></p>
<blockquote>
<p>例如：+7 + -3 = +4；-7 + +4 = -3.</p>
</blockquote>
</li>
<li>
<p><strong>符号不同的两个有理数相加，若两数绝对值相等，则结果为0。</strong></p>
<blockquote>
<p>例如：+2 + -2 = 0.</p>
</blockquote>
</li>
<li>
<p><strong>一个数同0相加，结果仍然是这个数。</strong></p>
<blockquote>
<p>例如：-2 + 0 = -2；+2 + 0 = +2.</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="二-有理数加法的交换律-结合律">二、有理数加法的交换律、结合律</h1>
<blockquote>
<p>有理数运算中，加法的交换律与结合律仍适用。</p>
</blockquote>
<ul>
<li><strong>加法交换律</strong><br>
两个数相加，交换加数的位置，和不变。<br>
例如：a + b = b + a。</li>
<li><strong>加法结合律</strong><br>
三个数相加，先把前两个数相加，或者先把后两个数相加，和不变。<br>
例如：(a + b) + c = a + (b + c)。</li>
</ul>
<blockquote>
<p>一般的，任意若干个数相加，无论各数相加的先后次序如何，其和不变。</p>
</blockquote>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【初中数学】五、绝对值]]></title>
        <id>https://jgduan.github.io/post/chu-zhong-shu-xue-wu-jue-dui-zhi/</id>
        <link href="https://jgduan.github.io/post/chu-zhong-shu-xue-wu-jue-dui-zhi/">
        </link>
        <updated>2021-01-14T09:01:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="学习目标">学习目标</h1>
<ol>
<li><strong>理解绝对值的概念及其几何意义；</strong></li>
<li><strong>会求一个数的绝对值；</strong></li>
<li><strong>了解绝对值的非负性，并能用其非负性解决相关问题；</strong></li>
<li><strong>进一步理解绝对值的代数意义和几何意义；</strong></li>
<li><strong>会用数轴或绝对值比较两个有理数的大小。</strong></li>
</ol>
<hr>
<h1 id="一-绝对值">一、绝对值</h1>
<ul>
<li><strong>绝对值的定义</strong><br>
一般地，数轴上表示数a的点与原点的距离叫做数a的绝对值。<br>
其中a可以是负数、正数和0。
<ul>
<li>正数的绝对值是其本身；</li>
<li>负数的绝对值是其相反数；</li>
<li>0的绝对值还是0.</li>
</ul>
</li>
<li><strong>绝对值的表示</strong><br>
数a的绝对值，记作：| a |.<br>
例如：-8的绝对值是8，记作：| -8 | = 8.</li>
<li><strong>互为相反数的两个数，它们的绝对值有什么关系？</strong><br>
互为相反数的的两个数，它们的绝对值是相等的。</li>
</ul>
<blockquote>
<p>两个正数，绝对值大的大；<br>
两个负数，绝对值大的反而小。</p>
</blockquote>
<hr>
<h1 id="二-有理数大小的比较">二、有理数大小的比较</h1>
<ol>
<li><strong>一个数与0比较，要考虑这个数的正负</strong><br>
一个数与0比较，正数大于0，负数小于0。</li>
<li><strong>异号两数比较，要考虑这两个数的正负</strong><br>
正数大于负数。</li>
<li><strong>同好两个数比较，要考虑这两个数的绝对值</strong><br>
两个正数，绝对值大的大；两个负数，绝对值大的反而小。</li>
<li><strong>多个有理数比较，适合用数轴</strong><br>
数轴上的点表示的数左边的小，右边的大。<br>
注意：需要简化时，要先简化再比较。</li>
</ol>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【初中数学】四、相反数]]></title>
        <id>https://jgduan.github.io/post/chu-zhong-shu-xue-si-xiang-fan-shu/</id>
        <link href="https://jgduan.github.io/post/chu-zhong-shu-xue-si-xiang-fan-shu/">
        </link>
        <updated>2021-01-14T08:42:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="学习目标">学习目标</h1>
<ol>
<li><strong>借助数轴了解相反数的概念；</strong></li>
<li><strong>知道互为相反数的两个数在数轴上的位置，能求一个数的相反数；</strong></li>
<li><strong>根据相反数的定义解决相关问题。</strong></li>
</ol>
<hr>
<h1 id="一-新课讲解">一、新课讲解</h1>
<ol>
<li>
<p><strong>观察这两个数，有什么相同和不同？</strong><br>
<strong>+5     -5</strong></p>
<ul>
<li>相同点<br>
数字相同</li>
<li>不同点<br>
符号不同</li>
</ul>
<p>归纳：一般地，设a是一个正整数，数轴上与原点的距离是a的点有两个，它们分别在原点左右，表示-a和a，我们就说这两点关于原点对称。</p>
</li>
</ol>
<hr>
<h1 id="二-相反数">二、相反数</h1>
<ol>
<li><strong>什么叫相反数？</strong><br>
像2和-2，5和-5这样，只有符号不同的两个数叫做互为<strong>相反数</strong>。<br>
一般地，a与-a互为相反数；特别地，0的相反数是0。
<blockquote>
<p>我们通常在一个数字前面添上“-”号，表示这个数的相反数。<br>
例如：-(-4) = 4，-(+5.5) = -5.5，-0 = 0。</p>
</blockquote>
</li>
</ol>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【初中数学】三、数轴]]></title>
        <id>https://jgduan.github.io/post/chu-zhong-shu-xue-san-shu-zhou/</id>
        <link href="https://jgduan.github.io/post/chu-zhong-shu-xue-san-shu-zhou/">
        </link>
        <updated>2021-01-13T09:57:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="学习目标">学习目标</h1>
<ol>
<li><strong>掌握数轴的三要素，能够熟练画出数轴；</strong></li>
<li><strong>能够将已知的数在数轴上表示出来，能说出数轴上已知的点所表示的数。</strong></li>
</ol>
<hr>
<h1 id="一-什么是数轴">一、什么是数轴？</h1>
<blockquote>
<p>数轴，为一种特定几何图形。直线是由无数个点组成的集合，实数包括正实数、零、负实数也有无数个。正因为它们的这个共性，所以用直线上无数个点来表示实数。这时就用一条规定了原点、正方向和单位长度的直线来表示实数。规定右边为正方向时，在这条直线上的两个数，右边上点表示的数总大于左边上点表示的数，正数大于零，零大于负数。</p>
</blockquote>
<p><strong>数轴：人们通常用一条直线上的点表示数，这条直线叫做数轴。这条直线需要满足：</strong></p>
<ol>
<li><strong>在直线上任取一点表示数0，这个点叫做原点；</strong></li>
<li><strong>通常规定从直线上从原点向右（或向上）为正方向，从原点向左（或向下）为负方向；</strong></li>
<li><strong>选取适当的长度为<em>单位长度</em>，直线上从原点向右，每隔一个单位长度取一个点，以此表示1，2，3，4，5....；从原点向左，用类似方法依次表示-1，-2，-3...。</strong></li>
</ol>
<hr>
<h1 id="二-数轴的要素">二、数轴的要素</h1>
<p><strong>数轴包含以下三要素：</strong></p>
<ol>
<li><strong>原点</strong></li>
<li><strong>正方向</strong></li>
<li><strong>单位长度</strong></li>
</ol>
<hr>
<h1 id="三-画数轴的四个步骤">三、画数轴的四个步骤</h1>
<ol>
<li><strong>画直线；</strong></li>
<li><strong>在直线上取一点作为原点；</strong></li>
<li><strong>确定正方向，并用箭头表示；</strong></li>
<li><strong>根据需要，选取适当的单位长度。</strong></li>
</ol>
<hr>
]]></content>
    </entry>
</feed>